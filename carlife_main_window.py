
import wx
import wx.adv
import os
import threading
import time
import io
from PIL import Image

import layout_main
import stream_filter_dialog
import album_artwork_dialog

import csv_parser
import packet_parser
import settings

import carlife_ico
import aptiv_ico

from common_constant import const

class CarLifeMainWindow (layout_main.BaseMainWindow):
	
	def __init__(self):
		super().__init__(None)
		
		self.all_packets = []
		self.display_packets = []
		
	def init_main_window(self):
		
		app_icon = carlife_ico.PyEmbeddedImage(carlife_ico.carlife)
		self.SetIcon(app_icon.data.GetIcon())
		
		self.listctrl_protocols.AppendTextColumn("Timestamp(m:s.ms.us)")
		self.listctrl_protocols.AppendTextColumn("Status")
		self.listctrl_protocols.AppendTextColumn("Sender")
		self.listctrl_protocols.AppendTextColumn("Receiver")
		self.listctrl_protocols.AppendTextColumn("Details")
		
		self.statusbar.SetFieldsCount(3)
		self.statusbar.SetStatusWidths([-1,-5,-1])
		self.statusbar.SetStatusText('rows', 0)
		self.statusbar.SetStatusText('file', 1)
		
		self.clear_all_displays()

		#self.start_analyse_file('C:\\PROJECT\\Python\\text_files\\carlife_new.csv')
		
		#stream = b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xe2\x02(ICC_PROFILE\x00\x01\x01\x00\x00\x02\x18\x00\x00\x00\x00\x02\x10\x00\x00mntrRGB XYZ \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00acsp\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\tdesc\x00\x00\x00\xf0\x00\x00\x00trXYZ\x00\x00\x01d\x00\x00\x00\x14gXYZ\x00\x00\x01x\x00\x00\x00\x14bXYZ\x00\x00\x01\x8c\x00\x00\x00\x14rTRC\x00\x00\x01\xa0\x00\x00\x00(gTRC\x00\x00\x01\xa0\x00\x00\x00(bTRC\x00\x00\x01\xa0\x00\x00\x00(wtpt\x00\x00\x01\xc8\x00\x00\x00\x14cprt\x00\x00\x01\xdc\x00\x00\x00<mluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00X\x00\x00\x00\x1c\x00s\x00R\x00G\x00B\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00XYZ \x00\x00\x00\x00\x00\x00o\xa2\x00\x008\xf5\x00\x00\x03\x90XYZ \x00\x00\x00\x00\x00\x00b\x99\x00\x00\xb7\x85\x00\x00\x18\xdaXYZ \x00\x00\x00\x00\x00\x00$\xa0\x00\x00\x0f\x84\x00\x00\xb6\xcfpara\x00\x00\x00\x00\x00\x04\x00\x00\x00\x02ff\x00\x00\xf2\xa7\x00\x00\rY\x00\x00\x13\xd0\x00\x00\n[\x00\x00\x00\x00\x00\x00\x00\x00XYZ \x00\x00\x00\x00\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3-mluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00 \x00\x00\x00\x1c\x00G\x00o\x00o\x00g\x00l\x00e\x00 \x00I\x00n\x00c\x00.\x00 \x002\x000\x001\x006\xff\xdb\x00C\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xdb\x00C\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xc0\x00\x11\x08\x00\xff\x00\xff\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1d\x00\x01\x00\x02\x02\x03\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x08\x04\x06\x02\x03\x05\x01\t\xff\xc4\x00J\x10\x00\x01\x02\x05\x02\x02\x05\x05\n\n\n\x03\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x11\x12\x06\x13\x07!\x141AQa\x08"\x81\xa1\xc1246qt\x91\xb1\xb3\xc3\xe1\x15\x1637Fu\x85\x86\xb5\xc5#Bbe\xa2\xb2\xd1\xe2\xf0\xf1\x17%&\xff\xc4\x00\x1a\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x02\x01\x05\x03\x07\xff\xc4\x00/\x11\x01\x00\x01\x02\x03\x06\x04\x06\x02\x03\x00\x00\x00\x00\x00\x00\x00\x01\x02\x11!1Q\x03\x12Aaq\xb12\x81\xa1\xf0\x04R\x91\xc1\xd1\xf1\x13\xb2"\x82\xe1\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xfc\x17\x00\x1f\xbc?\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x9f\xf3\xe7@\x00\x1fQ.\xb6\xf8\xfb\x93\xb3\xbdU\x13\x9f\x8a\xfc\xfdF\xc1\'\xa5u\x04\xfe\xe7E\xa2\xd5b\xedc\xb9i;c\x9ex^\xf1Q|\xec\x1dn]\x9c\xc3\x931\x19\xf1\xcb\xdf\x9b^\x07\xa9Y\xa2U\xb4\xfc\xd49\x1a\xbc\x9fD\x9b|\xa4\t\xa7B\xe92\x91\xf0\xde\xcf\xcc\xcaZ<oq\x82y\xcfHy\xe5\xe6\xb7\xcdu\xbc\xb0\xe8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xb2P4\x8e\xa0\xd5\t4\xea\x1c\x82N\xa4\x92\xc1I\xa5Y\xa9Im\xa5\x98H\xab\x07\xdfQ\xe0#\xf3\xd9\x8b\xee\x15\xd8\xe3\xe7[&\xe4\x1a\xd8\'\x1aw\x025$\xde}.\xa7H\x91\xb5\xb6\xff\x00\xa6Y\x85\x7f\xbb\xcf$]\x872\xd6n(\x88\xfc\xf2[\xe1\x8a+\xb7Zw\x00)0\x98\xff\x00\xc2\xf5\xd9\x99\xf7\xaa3m)\xf2r\xb2M\x82\xa8\xb17Q\xf1f\x96\xa4\xb3(\xfb\xc3\xdbt6J\xed\xe0\xfc\x92.m\xdb\xce\xfd:\xfaO.\\\xdd\xdd\xab\x84_\xce9q\xe97\xe6\xab\'\xc5UD\xe4\x88\xab\xdc\xaa\xa9\xf4#\x97\xd4^z7\t4\x05:af[Bl\xc4tc\x9a\xd5\x9d\x99\x98\x9c\x86\xcb\xdf\xdcB\x98|F1V\xfc\xd59\xf8\xa1\xba\xcaQ\xe9t\x84V\xd2)t\xdae\xf2nrrl\x85\x17\x1ewE~NUU\xba\xa2\xaa#ou\xed4\xee\xe5Zz\xc7\xbd}\xce\x146\x9f\xa1u\xadGwcMT\xd3m\x13\x94iI\xc9u~YY\x19\xd2e`$Op\xec\xb6\x96"C\xf3w1\xc9\xb7\x90\xe9\\\x05\xd6\xb3\xac\x87\x16\xa2\xfaM\x11\x8eEW\xb6n\xa3-1\x19\x9dvF\xc2\x93\x89\x19\\\xe5\xb7S\x9d\r\x12\xfd}v\xb7\xb0\xda\xec\xb2W\xab\x97\xb6\xff\x00\xd6\xe4\xa8\x97\xe7\xd9\xe93\\\xdc\xad\xce\xd6\x0c\xcd;H\xca\x9b\xeby\x8f\xa7\x0e\xd3\xf6V\xa9O\'\xf9\x18\ty\xedW31\x15\x11\xb6d\x84\x83\xe5a5n\xfc\xd1\xd1V\xa3\x13}\xab\x93U\x8a\xd6@\xc6\xcfEG\xab\x93\x1d\xd2C\x84z\x1eN3c\xc7\xa7G\xaa\xbe\x1a"BJ\x9c\xfc\xdcXp\xec\xaa\xaa\xa9\x0eV,\xa3\x1e\xae\xbad\xb1\x11\xe9\xe6\xb6\xc8\x9evR\xfe\xdf\x8f\xab\xbf\xaf\xb4m\xf8\xfa\xbe\xf0\xf9o\xe7\x86|\xfar\xe4\xf0)\x94\x1d=*\xc4\x87\'B\xa6H5\x8dV\xb7\xa0\xca\xb2\x03\x91\xab\x9d\xd1\\\x97s\xafu\xba\xb9\xceUE\xb1\xec\xcc@\x83\x83\x19\x06\x13a\xa3:\x91\xb6K\xf5\'5\xba_\xbe\xea\xab\xdc\x9dg\x18p\xf0\xbf;\xde\xdd\x96\xea\xbf\x8a\xf7\x99\x80\x9a\xb1\xc3.\x1e\x98r\x8c2\xc1K8\xcc\xc6\xbbW\xb7$\xbd\xa9RV\xe6\xa9\xd6\xb1\xbb\x95;\x88h\x99\xf8\xc9\xf0\xbd\xbf\xaa\xa4~\x98\xc40\x1a\xa7:\xba\xfd\xe4\x00\x06\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xd3\xf99\xa2t\x1dZ\xee\xd5\x99\xa3\xa2\xfcM\x87PT\xff\x002\xfc\xe5X-G\x93\x9f\xbc5g\xca\xa9\x1fU>ci\xe0\x9e\xb4\xff\x00hv\x9c\xe3\xacwX\xa7\xfb\xa5\xf4}\x07Z\xb5\xab\xd6\x97\xbf\xc6v?\xdd/\xa3\xe8C\x89\x04Ms13\x8cLE\xf2\xd3\xf2\xf4h\xd9\xd14\xdei\xc6\xf5q\x9e\x15LG\x1d\x1cU\xd8""\'\x7f\xdf\xd7~\xf3\x8e\xe7\x87\xaf\xee\x0fEUj"*\xaf>I\xcd{\x0e\n\x8a\x9dh\xa9\xf1\xa5\xbe\x92\x8af\xf1\x17\xceo\xdd\xf1\xa6\x98\x98\x89\x98\xf5\x9d\\\xf7<=\x7fq\x98y\xe6L\xcc\xcc\xbc\x9c\xbcI\xa9\xb8\xf2\xf2\xb2\xf0\xb1\xdc\x8f51\x02Z\x0b2\xbd\xb2\x89\x1a#:\xec\xb6\xc5\x1d\xe3nWU\xbd\x86\xef\x9e\\\xad\x9b\xb3\x14Fq\xde{;\xc1\x1eO\xf1W@S\x92\x1e\xee\xa8\xa6GX\xbb\x98\xa5:$Z\xa5\xb6\xf1\xcbqi\xb0f\xd6\r\xf3M\xbd\xd4f\xed\x9f\xb4\x8f\xdb\x89\x8c}Q\xf2\x82\xa0\xb2\x12~\r\xa2T\xa7\xa2\xaa\xaa+&"6\x9e\xc4Ku\xee\xac\t\xae}|\xb0\xe7nK\xcd\n\x9f%\x83\xbaw\xa7\xce\x87\xd3J\xd1\x9a\x81un\x9d\xa7\xea\x1e\x88\xb4\xff\x00\xc2\t4\xbd\x17\xa4\xac\xde\xcfG\x9d\x98\x94\xb6\xfe\xcc\xb6\xe6{\x1b\x97\xd8f9\xe1\xe7c\x93\xb7\x18}\xbe\x8fi\xc9\x98\x8c\xe4S>2\xfc0o\xea\x99\x0f\xb6!\xf2`\xe3/\xc3\x06\xfe\xa9\x90\xfbb\x1f:\x00\x00\x00\x00\x00\x00\x00\x001\xc0\x018\x00\x00\x00\x00\x00\x00\x00\x00Z\xaf\'\x1fyj\xbf\x95R~\xa6|\xaa\xa5\xaa\xf2q\xf7\x96\xab\xf9U\'\xeag\xc3Tx\xa3\xcf\xb4\xac\x96\xdf\x8f\xab\xef5\x9dG\xabt\xf6\x94\xe8i^\xa8,\x92\xd4:GDD\x94\x9c\x99X\xdd\x17c\xa4{\xd2\x04|6\xfaL\x0f\xcac\x96\xe2a\x96/\xc7hW"-\x95}JV/(\xf75SG%\xfa\xff\x00\x18{\x17\xfb\x8c\x82)\xde\xae\xf3\x9c\xf1\xf2\xd3\x0e\n\xf6s3E39\xe3\xde^\xf5c\x8f4)H-ZU*\xa1?\x19\xea\xa8\xa90\xe6S\xd8\xc4\xe5eH\x8b\nm\x1e\xaa\x99]\xb8\xa5\xac\x9c\xd7.Q\xd5C\x8e\xda\x86a[\xd0\xa9\xd2r\x8dEr\xbd\xb31\x16z\xf7\xc7\r\xb5l\tE\x87\x8d\x9f\x9a\xbbs<\x9bl1\\\xe0DK*\xaf}\xbdFl>\xdfG\xb4\xfb\xd3D^\xd9_\x8c_\xae\xb7\xe1\xabS6\x89\x9d\x1b\xdc\xe7\x10\xf5\xa5IY\xd2+\xf3lHYb\x92\xb0\xe5$\xaf\x9e9n,\xa4\xbc\x1d\xdb`\x98f\x8b\xb7wal\xdf\x96\xa73\x1e<\xcb\x9f\x1ab4H\xd1^\xb9>$W\xb9\xefr\xdd9\xaa\xb9W\xfd\x13\xb1\x0cv*%\xee\xbd\xde\xd3\xeb\x9c\x8a\x8a\x88\xbe\xa5\xef*\x8f\x87\x8d\xdb\xda\xd1\xd6\xfc\xbel^f\xdbm\xfc\xb3\x14\xc6\x16\x9b\xda\xd8\xce\x17\xe7l\xe7)y\xf1\x7f(\xefG\xf9P\xeb;c%\x9e\xab\xdfoR!\xd4rbbm-\xd3\x94t^\x1e\r~n4\xef\xc5S\xfe1P%8}\xbe\x8fi\x16pk\xf3q\xa7~*\x9f\xf1\x8a\x81)\xc3\xed\xf4{H~.f\'g\x118M\xe6|\xa2l\xa5L\xb8\xc8\xb7\xd6\t\xe1J\x90O\x9bt\x88\t{\x8c\x7f\x0c?e\xc8\xfd\xa9\x10\x9b\xa2fi\xa6g\x19\x98\xc4\xc8\x00\x15\x00\x00\x00\x00\x00\x00\x0cp\x00N\x00\x00\x00\x00\x00\x00\x00\x00\x16\xa3\xc9\xcf\xde\x1a\xb3\xe5T\x8f\xaa\x9f*\xb9j<\x9c\xfd\xe1\xab>UH\xfa\xa9\xf0\xe5YOI\xec\xb1nr\xa2\xaa"\xfa\x93\xb8\xac~Q\x91\x1e\x9f\x89\xd6^\xbf\xc6\x1e\xc4\xfe\xe3\xf0,\xdb\xfd\xd2\xfa>\x84+\x0f\x94o\xe8o\xef\x0f\xf20\xa5\\\xc0\x00}ET\xeaP\xaeU\xe4\xab\xeaC\xe0(y\xe0\x00\x0b\xb3\xc1\xaf\xcd\xc6\x9d\xf8\xaa\x7f\xc6*\x04\xa7\x0f\xb7\xd1\xed"\xce\r~n4\xef\xc5S\xfe1P%8}\xbe\x8fi\xe4\xfcg\x8be\xfe\xdd\xa5\xe8)\x8f\x18\xfe\x18~\xcb\x91\xfbR!%\xee1\xfc0\xfd\x97#\xf6\xa4Bog\xe0\xa7\xa0\x00\n\xc0\x00\x00\x00\x00\x00\x068\x00\'\x00\x00\x00\x00\x00\x00\x00\x00\x0bQ\xe4\xe7\xef\rY\xf2\xaaG\xd5O\x95\\\xb5\x1eN~\xf0\xd5\x9f*\xa4}T\xf8r\xac\xa7\xa4\xf6X\xa7\xfb\xa5\xf4}\x08V\x1f(\xdf\xd0\xdf\xde\x1f\xe4e\x9e\x7f\xba_G\xd0\x85a\xf2\x8d\xfd\r\xfd\xe1\xfeF\x14\xab\x98\x00\x00\x00\xa0\x00\x00]\x9e\r~n4\xef\xc5S\xfe1P%8}\xbe\x8fi\x16piS\xff\x00\x1ci\xde}IS\xbf\x87\xfe\xe2\xa1\xd6Jp\xfb}\x1e\xd3\xc9\xf8\xbf\x16\xcf\x96\xf0\xa6<c\xf8a\xfb.G\xedH\x84\x97\xb8\xc7\xf0\xc3\xf6\\\x8f\xda\x91\t\xbd\x9f\x82\x9e\x80\x00+\x00\x00\x00\x00\x00\x00\x18\xe0\x00\x9c\x00\x00\x00\x00\x00\x00\x07\xabG\xa1\xd65\x04\xeb)\xf4Jl\xddNr%\xb1\x85+\r\x1f\x8d\xefm\xc5UDj-\x96\xcb\xcf\xdc\xaa[\xb5%\xaa\x7f\x03+\xd1\xa2*T\xaa\x94\xf9\x088\xdd"@k\xe7\xde\xab\xdd\xb3\x9c\xad\xbb9\xacD\xed\xe5\xca\xc1\xcb\xe3d Z\x8f\'?xj\xcf\x95R>\xaa|\xd7\xe2p\x02a\x15\xad\x85\xaa!\xbd]\x7f\xcaR\x16\x12r\xeeT\xaaD\xbaZ\xcb\xe7c\xd7n\xcer\x8f\x0btE[A\xcb\xd6\xa0\xd4\xa6)\xf3iT\x8b#\x16\x0b\xe4\xa3>&\x1d\x19\xb3l\x88\xd8\xad|8j\xdb\xee\xb1X\xa8\xae\xcb\xce\xba2\xcdW\xe7~\x9d}\'\xf0\xec\xd3T\xc4\xc4F6\xe5\x1d\xed\xac%\x97\xfb\xa5\xf4}\x08V\x1f(\xdf\xd0\xdf\xde\x1f\xe4e\x9c\xcb/;\xbf\xfe\x8a\xc7\xe5\x1b\xfa\x1b\xfb\xc3\xfc\x8c\xd2\x85s\x00\x00\'-!\xc1\x8a\x85b\x06\xfe\xa7\x8d3D\x94\x88\xfb>\x9f\t]+[L0T\\\xac\xf4\x97c\x95\xc8\x99+_\x93US\x15Du\xf3x!\xa3\xe1O\xb2>\xaa\xaa\xca6"\xcb\xc6H4hqR\xf0\x9b\x1a\x1e[\xf3\x8e\x84\xff\x00\xca+\x17\x06\xcb\xb9W\x04r=\xc8\x8eTEm\x9aE\xb2\xa2\xda\xf6\xea\xf9\x959wu\xaf\xac\x08\xf2\x99\xc1M\t.\xd7\xa4\xcc\xa4\xe5Q\x1c\x90\xd1\x8b9?8\xc5\x85\x8a>\xf8\xac\xa4ier\xc4\xc97\x16.\xef67o\x0b\xbf<\x89\xae\rp\xf9\xca\xd5e\x13j\xd6\xbd\xa7\'#*\xf5\xdf\xdf3\x11\x91>bI\x84\xfb"\xa5\xba\xad\xdb\xf1\xf8\x19nvV\xe5k\x19\xdf\xa7_I\xfc\rWOi\xd9M5K\x81G\x90\x8f9\x1eR[5\x85\x12~?J\x9bU{\x95\xce\xdd\x98\xc6\x1e\xe75\xe5\xe66\xde*\xaa\xa6\xc9\x0f\xb7\xd1\xed;\x01\xf0\xb4a\xcb\x18\xfaLv\x99\xcc\xc9K\xf8\xcb\xf0\xc1\xbf\xaad>\xd8\x87\xc9\x83\x8dK\x86\xbb\x98\x97D\xb2@\xa5\xd3Q\x17\xae\xf9$u\xf5Z\xddk\xe8!\xf3\xb17\xc9\xc8\xca:[\xe9\x80\x00(t\x00\x00\x00\x00\x00\x01\x8e\x00\t\xc0\x00\x00\x00\x03g\xd2Z^oV\xd5\xe0\xd2\xa5\x1f\xb3\x7f\xe9f\xa66\xf7\x92RM\x97X\xf3N\x87\xb9\x0b<,\xd80a\xee3~n<\xac\xb6p\xf7\xb7Y\xac\x16\x83\x81\x94i\x99ZU^\xad\x19q\x83V\x8f\'\nY\x8a\xd5GcN\xe9\xa8\xf8\xaa\xaa\xeb\xabb>o\x16y\xa8\x96\x86\xaa\x8ev^h\xf7\xef\xfe\xa6\xad\'@\xa5\xe9j\\:M.\x0b\xa1\xc2G9\xcf{\x9c\x8a\xe8\xeeF\xd9#\xc7\xb3[\x9c\xdb\xec\xbd"b\xff\x00\xd3\xda\x1a$8I\r2\xf7\x9d\x0f\x17e{\xdd\\\xb6\xb7\x7f\x8d\xfcL8}\xbe\x8fi\xea\x19\xaf\xc3>]\xe1\xcab\xdbJm\xc6&-\xd2\x9f\xd3\x8bZ\x8dK\'\xb7\xbd|W\xbc\xe5d\xee\x00\x82f\xa9\xaa\xf3\x97\x96\x9f\\\xde\x96\xcfgETD\xcc^f\xfcgY\x8e\x12\xe9sq\xb7;\xdc\xac\x9eQJ\x97\xd1\xe9\xda\x89\xa8\x16\xde\x0b\xf8\x12\xdf=\x97\xe6,\xecN\xcfO\xb0\xa9\xfeP5\x19Y\x8a\xfd\x0e\x97\x01\xeb\x12%2\x96\xf9\xa9\xa7#\x91Z\xc8\xd5GA{`""rt&J\xa2\xbdUUW4EjY\x15\xdfzf\xf1\x139\xcd\xfe\xecS31\x13>\xf1A`\x0e\xae\xb2\xa7\xc5{\xf8o$\xd9M\x11\xa6\xd3$z\xcdR\xe5**\xb8\xe1\x82\xd4 2i`*#\xdfu\x97X\x8b\x01_t\xdcVn`\xcc\xb0n\xeb\xb7\xe3\xea\xfb\xc8\xbf\x84z\xaaKQh\xeal(0\xa2K\xcd\xd2e\xe5\xe4&\xe5b9\x1d\x822\x1a\xb6Z#"#[\x93c2\x14_1X\xd7C\xdaTUwZJ\x86k\xf0\xcf\x97x\x00\x01\xe3\xd7;J\xaa\x99\xbd\xefo\x97H\x81\x90\x01\r\xf1S\x88\xd2Zz\x9bP\xa1S\xa3\xb26\xa1\x8f,\xdcR\x1b\x12g\xf0b\xc6W6\x1cX\xd07!5\xefv*\xe6\xb1\xd1\x98\xacF\xab\x95\x1d{.\xa3\x19\x88\xd4V\xbe \xd5\xe5\xab\xfa\xdbPU\xe5\x11R^bf\x0c\x08J\xe5EW\xb6FR^Gr\xe8\xd6\xf2\x88\xe9wDD\xb2\xa25\xe8\x88\xe7[\'i{~>\xaf\xbc\xfa\xc7d\x97\xb2\xb7\xc1\xd7\xbf;\xf5\xa2\xf3\xbf\x8fo]\xd4\xe6z\x19\x11\x94[.\x0cp\x01@\x00\x00\x00\x00\x00\x00\xc7\x00\x04\xe0\x00\x00\x00\x01p8/S\x83Q\xd10\x18\xdb\xb6=>\xa1;!\x1e\x1a\xafRBXQ!DN\xe4\x8a\xd8\xaeTN\xa4\xc7\x97iO\xcd\xf3Fk\n\x8e\x8b\xa8\xf4\xa9\x16\xef\xc8\xcc,4\xa9\xd3\x16*\xc1\x87P\x85\t\xcfs\x1a\xe8\xb8\xc4V>\x1a\xc4\x8a\xb0\xdd\x83\x95\x1c\xfeJ\xd4Nffm1\xce}?v\xfa/\x04>\xdfG\xb4\xf5\x08\xcbNq\x1fK\xea&5\x90\xaa\x12\xd4\xe9\xd4fN\x90\xa9FIx\xde;*\x8dsc\xb5\xbc\x91\\\xdb6\xf7N\xc5RJ\x86\xf6\xc4j9\xaa\x8eED[\xa7R\xa2\xa5\xd1\xcd\xefk\x93\x9bW\xb5\x145N5\xd11\x8c\x7f\x97\xf5}s\xb1\xb7+\xdf\xd9\xff\x00g[\x9d\x95\xb9Z\xc7\'\xf3V\xa7\x8f\x87\x87z\xa2|\xea\x89\xe2i\x1a\xab_i\x9d"\xd8\xd0\xeau(\x11\'\xe1\xdd\xad\xa4\xc9\xb9\xd1\xea[\x96\xf3Y3\x01\x1a\x8c\x93c\xdc\xadD\x99\x8f\x15\xb2\xacD\x88\xe8\xf1\xa0\xe2\xc4\x895\xa2\xf7\xb6:\xe3\xd3\xa2\xda"-\x13lq\xfb\xc3e\xa9T%\xa92\x13u)\xc8\x89\x0eZJ^,\xc4g\xaa\xa2Y\x90\x98\xafu\xaf\xdbd\xe4\x89u^\xc4U\xe4~}W\xeb3\x1a\x8fPU\xab\xf3\x08\xe6:\xa5\x1d"C\x82\xe5\xba\xc1\x82\xc5zB\x87~\xe4k\x91\x11,\x8a\x96\xe7\xcf\x91\xbb\xf1\x03\x89\xd3\xba\xc9\xec\x95\x96k\xa4\xa8\xf0\xd7$\x95l\\\xdd2\xf4U\xb4I\x88\x8dk\x11\xe8\x9f\xd5\x86\x8dV5\x7f\xac\xee\xb5\x8c\xce\xfb\xfd\xc3l\x81\xd7\xd6\x01Bw\xb7@\xd4U}16\x93\xf4I\x9e\x876\x96\xc6.9\xa2"*\xaf6]2K\xaa\xd9.\x88\x97\xbfe\x96\xc6\xd08\xf9N\x9d\x8b\n_P\xd2\x1fJ]\xb8m}BRig`E\x8f\xcd\x1e\xf7\xca\xac\xac\xbcYV*\xa3]\xe6\xc5\x99DG9U[\x8f\x9dU\xc0\x17\xc6C\x88\xfa*\xa2\xb1\x12\r~J\x1e\xde9t\xa7:Z\xf9gm\xbd\xd6\xb7r\xd8.[yav\xe7\x8eM\xbf\xca\x87\x12\xb4-/o\xa5\xea95\xdd\xcb\x1e\x89\x0ej{\x1c1\xbe\xefD\x81\x17f\xf9\xa6\x1b\xb8ny\xdby`\xfch\\Hy\xdb\x9d\xad~\xcb\xf5\xdb\xc5;\x8e\xbd\x8f\xed\xff\x00\x87\xfd\xc4\x93\xb3\xa2\xa9\xbc\xc5\xe6s\xc6~\xd3\xc9\x99\x9a\xaf\x84^:\xc4h\xb2:\xc3\x8f\x91c\xc0\x98\x92\xd20"I\xc5VD\x85\n\xab6\x8d\x8b\xee\xd1\xa8\xd8\xb0\xe4\xd1\x18\xadV":\xca\xe9\x8b\xe4\xe4Uo\x9b\xce\x03\x8b5\x1an,i\x89\x98\x91#\xcc\xc7\x88\xb1c\xc7\x8a\xe5tH\x91\x1c\xaa\xaes\x9c\xaa\xaa\xbc\xf9"rDNH\x96<\xad\x8f\xed\xff\x00\x87\xfd\xc6d>\xdfG\xb4\xd9\x17\xbc\xcdQ\x1c-\x97\xed\xc1V\xea\xab\xde|\x00\xa1\xa0\x00\x00\x00\x00\x00\x00\x00\x068\x00\'\x00\x00\x00\x00\x00\x00f=\x8a\xe5j\xa3\x95\xaa\x97\xe6\x89\xcf\x9d\xbcR\xddG\xa5!Q\xabS\xd2"HU\xear\x1b\x98n\xf4\x19\xc8\xd2\xbb\xb8nm\xee,\'5\xce\xc3q\xf8]\xcb\x8en\xc6\xd9)\x82sb\xa2^\xeb\xdd\xed\x0f\x85\xe6\xd6\xe1\xd25\xbfvt\xd6\xa4\xd4\xf1-\xff\x00\xd0V\xa2^\xf7H\xd5I\xe8\xf7\xf8\xb7\xe6^\xd6Ym\xf96\xb7\xd4j\xdc\xfbV\xeb\xf1"z\x93\x92z\x0fm\xe8\xc7\xda\xeb\xd5\xe0\xbfw\x89\xd1\xb7\xe3\xea\xfb\xc2\xf7N\r\xcb+y\xdd\xf7^\xebu^\xdd^\x07 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc7\x00\x04\xe0\x00\x00\x00\x00\x00\x01\xc9\xafso\x8a\xda\xfd|\x91z\xbe4^\xf3\x88\x03+7w\xfa\x93\xfd\x0e \x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0cp\x00N\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0cp\x00N\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xff\xd9'
		#self.display_album_artwork_dialog(stream)

		
	def clear_all_displays(self):
		self.text_rawdata.Clear()
		self.listctrl_protocols.DeleteAllItems();
		self.treectrl_details.DeleteAllItems()
		self.statusbar.SetStatusText('rows', 0)
		
	def display_packets_info(self):
		print("display_packets_info-> start")
		for packet in self.display_packets:
			if packet['prompt']:
				# this is a prompt packet
				raw_data = packet['raw_data']
				
				item_data = [raw_data['timestamp'], '', '', '', raw_data['record']]
				self.listctrl_protocols.AppendItem(item_data)
			else:
				header = packet['header']
				status = packet['status']
				
				timestamp = header['raw_data']['timestamp']
				
				item_data = []
				item_data.append(timestamp)
				if status == const.PARSE_STATUS_PASS:
					item_data.append(u'\u2714')
				else:
					item_data.append(u'\u2718')

				if packet.__contains__('message'):
					message = packet['message']
					if status == const.PARSE_STATUS_PASS:
						item_data.append(message['sender'])
						item_data.append(message['receiver'])
						item_data.append(message['name'])
					else:
						item_data.append(const.UNKNOWN)
						item_data.append(const.UNKNOWN)
						if message.__contains__('service_type'):
							item_data.append(message['service_type'])
						else:
							item_data.append(const.UNKNOWN)
				else:
					item_data.append(const.UNKNOWN)
					item_data.append(const.UNKNOWN)
					item_data.append(const.UNKNOWN)
				
				self.listctrl_protocols.AppendItem(item_data)
		
		self.statusbar.SetStatusText(str(len(self.display_packets)) + ' rows', 0)	
		print("display_packets_info-> end")
	
	def display_packet_details(self, item_index):
		self.treectrl_details.DeleteAllItems()
		
		packet_details = self.display_packets[item_index]
		if packet_details['prompt']:
			return
		
		header = packet_details['header']
		message = packet_details['message']
		status = packet_details['status']
		
		if status == const.PARSE_STATUS_FAIL:
			return
		
		channel_id = header['channel_id']
		channel_name = packet_parser.get_channel_name_from_id(channel_id)
		
		message_service_type = message['service_type']
		message_name = message['name']
		message_len = header['msg_len']
		
		has_parameters = False
		if message.__contains__('parameters'):
			message_parameters = message['parameters']
			has_parameters = True
		
		node_details = self.treectrl_details.AddRoot('Details')
		node_summary = self.treectrl_details.AppendItem(node_details, 'Summary')
		if has_parameters:
			node_parameters = self.treectrl_details.AppendItem(node_details, 'Parameters')
		
		self.treectrl_details.AppendItem(node_summary, 'Channel: ' + channel_name)
		self.treectrl_details.AppendItem(node_summary, 'Service Type: ' + message_service_type)
		self.treectrl_details.AppendItem(node_summary, 'Name: ' + message_name)
		self.treectrl_details.AppendItem(node_summary, 'Length: ' + str(message_len) + ' bytes') 
		
		if has_parameters:
			for key, value in message_parameters.items():
				self.treectrl_details.AppendItem(node_parameters, key + ': ' + value)
			
		self.treectrl_details.ExpandAll()
		
	
	def display_packet_raw_data(self, item_index):
		self.text_rawdata.Clear()
		
		packet_details = self.display_packets[item_index]
		if packet_details['prompt']:
			return
		
		header_data = packet_details['header']['raw_data']['data']
		header_ascii = packet_details['header']['raw_data']['ascii']
		
		message_data = packet_details['message']['raw_data']['data']
		message_ascii = packet_details['message']['raw_data']['ascii']
		
		
		all_data = header_data + ' ' + message_data
		all_ascii = header_ascii + message_ascii
		
		all_data_len = len(all_data)
		all_ascii_len = len(all_ascii)
		
		data_len = all_data_len;
		offset = 0
		raw_data_start = 0
		raw_data_end = 0
		raw_ascii_start = 0
		raw_ascii_end = 0
		while data_len > 0:
			#print("data_len: " + str(data_len))
			
			if data_len // const.MAX_RAW_DATA_BYTES_PER_LINE > 0:
				raw_data_start = offset * const.MAX_RAW_DATA_BYTES_PER_LINE
				raw_data_end = raw_data_start + const.MAX_RAW_DATA_BYTES_PER_LINE
				
				self.text_rawdata.AppendText(all_data[raw_data_start:raw_data_end])
				self.text_rawdata.AppendText(' | ')
				
				raw_ascii_start = offset * const.MAX_RAW_DATA_ASCII_PER_LINE
				raw_ascii_end = raw_ascii_start + const.MAX_RAW_DATA_ASCII_PER_LINE
				
				self.text_rawdata.AppendText(all_ascii[raw_ascii_start:raw_ascii_end])
				self.text_rawdata.AppendText('\n')
				
				offset += 1
				data_len -= const.MAX_RAW_DATA_BYTES_PER_LINE
				
			else:
				left_data = all_data[-data_len:].ljust(const.MAX_RAW_DATA_BYTES_PER_LINE)
				
				self.text_rawdata.AppendText(left_data)		
				self.text_rawdata.AppendText(' | ')
				self.text_rawdata.AppendText(all_ascii[raw_ascii_end:])
				data_len = 0
				
			
	def display_about_dialog_info(self):
		info = wx.adv.AboutDialogInfo()
		info.SetName(settings.application_info['name'])
		info.SetVersion(settings.application_info['version'])
		info.SetDescription(settings.application_info['description'])
		info.SetCopyright(settings.application_info['copyright'])
		info.SetWebSite(settings.application_info['website'])
		info.AddDeveloper(settings.application_info['developer'])
		icon = aptiv_ico.PyEmbeddedImage(aptiv_ico.aptiv)
		info.SetIcon(icon.data.GetIcon())

		wx.adv.AboutBox(info)
	
	def display_stream_filter_dialog(self):
		dlg = stream_filter_dialog.StreamFilterDialog(self)
		result = dlg.ShowModal()
		if result == wx.ID_OK:
			print("OK")
			self.filter_display_packets()
			self.clear_all_displays()
			self.display_packets_info()
			
		elif result == wx.ID_CANCEL:
			print("CANCEL")
		else:
			print("ERROR")
		
		dlg.Destroy()
		
	
	def display_import_file_dialog(self):
		dlg = wx.FileDialog(self, message = u"select file",
							defaultDir = os.getcwd(),
							defaultFile = "",
							style = wx.FD_OPEN)
							
		if dlg.ShowModal() == wx.ID_OK:
			paths = dlg.GetPaths()
			print(paths)
			if len(paths) > 1:
				print("only one file could be selected")
			else:
				print('file path: ' + paths[0])
				self.start_analyse_file(paths[0])
				
		dlg.Destroy()
	
	def display_album_artwork_dialog(self, stream):
		dlg = album_artwork_dialog.AlbumArtworkDialog(self)
		dlg.set_album_artwork_stream(stream)
		
		result = dlg.ShowModal()
		dlg.Destroy()
		
	
	def parse_all_packets_details(self, packets, dialog):
		index = 0
		total = len(packets)
		
		for packet in packets:
			packet_parser.parse_packet(packet)
			
			# update UI
			index += 1
			progress = int((index / total) * 100)
			dialog.Update(progress, 'Parsing packet: ' + str(progress) + '%')
			#wx.CallAfter(dialog.Update, progress, 'Parsing packet: ' + str(progress) + '%')
			#time.sleep(0.001)


	def filter_display_packets(self):
		self.display_packets.clear()
		
		for packet in self.all_packets:
			if packet['prompt']:
				self.display_packets.append(packet)
			else:
				if packet.__contains__('message'):
					message = packet['message']
					service_type = message['service_type']
					if service_type not in settings.packets_ignore_setting:
						self.display_packets.append(packet)
						

	def start_analyse_file(self, file_path):
		self.statusbar.SetStatusText(file_path, 1)
		self.clear_all_displays()
		
		dialog = wx.ProgressDialog('Analyzing data', 'Please wait...')
		
		thread = threading.Thread(target=self.extract_and_parse_file, args=(file_path, dialog))
		thread.setDaemon(True)
		thread.start()
		
	def extract_and_parse_file(self, file_path, dialog):
		wx.CallAfter(dialog.Update, 0, 'Extracting data...')
		raw_datas = csv_parser.get_raw_datas(file_path)
		
		wx.CallAfter(dialog.Update, 0, 'Extracting packet...')
		self.all_packets.clear()
		self.all_packets = packet_parser.find_all_packets(raw_datas, dialog)
		
		self.parse_all_packets_details(self.all_packets, dialog)
		
		self.filter_display_packets()
		self.display_packets_info()

		wx.CallAfter(dialog.Destroy)
		
	
	def menuItem_importOnMenuSelection( self, event ):
		event.Skip()
		self.display_import_file_dialog()
		
	
	def menuItem_filterOnMenuSelection( self, event ):
		event.Skip()
		self.display_stream_filter_dialog()
		
	def menuItem_aboutOnMenuSelection( self, event ):
		event.Skip()
		self.display_about_dialog_info()
        
	def tool_importOnToolClicked( self, event ):
		event.Skip()
		print("\n tool_importOnToolClicked")
		self.display_import_file_dialog()
	
	def tool_filterOnToolClicked( self, event ):
		event.Skip()
		print("\n tool_filterOnToolClicked")
		self.display_stream_filter_dialog()
		
        
	def listctrl_protocolsOnDataViewListCtrlSelectionChanged( self, event ):
		event.Skip()
		item_index = self.listctrl_protocols.GetSelectedRow()
		print("\nOnDataViewListCtrlSelectionChanged: " + str(item_index))
		print(self.display_packets[item_index])
		
		self.display_packet_details(item_index)
		self.display_packet_raw_data(item_index)
		
		
	def treectrl_detailsOnTreeSelChanged( self, event ):
		event.Skip()
		print("\ntreectrl_detailsOnTreeSelChanged: ")
		item = self.treectrl_details.GetSelection()
		text = self.treectrl_details.GetItemText(item)
		print("selected item: ", text)
		
		if not text.startswith('albumArt'):
			return
		
		item_index = self.listctrl_protocols.GetSelectedRow()
		packet = self.display_packets[item_index]
		message = packet['message']
		if message.__contains__('albumArt_raw'):
			image_stream = message['albumArt_raw']
			self.display_album_artwork_dialog(image_stream)
		
		
		
if __name__ == '__main__':
	app = wx.App()
	
	main_win = CarLifeMainWindow()
	main_win.init_main_window()
	main_win.Show()
	
	app.MainLoop()
